openapi: 3.0.0
info:
  title: Appartners API
  description: "API documentation for the Appartners application, which helps users find apartments and roommates."
  version: 1.0.0
servers:
- url: http://localhost:8000/api/v1
  description: Local Development Server
- url: https://api.appartners.com/api/v1
  description: Production server
security:
- BearerAuth: []
tags:
- name: Authenticate
  description: Endpoints related to user authentication, registration and validation
- name: Users
  description: "Endpoints related to user profile management and preferences."
- name: Apartments
  description: "Endpoints related to apartment management, creation, and searching."
- name: Questionnaire
  description: "Endpoints related to user questionnaires and responses."
paths:
  /authenticate/validate-unique/:
    post:
      tags:
      - Authenticate
      summary: Validate unique user details
      description: Validates the user phone number and email to check validity and uniqueness.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateUniqueRequest'
        required: true
      responses:
        "200":
          description: Valid details
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_valid:
                    type: boolean
                  phone_valid:
                    type: boolean
        "400":
          description: Invalid or non-unique details
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  email_valid:
                    type: boolean
                  phone_valid:
                    type: boolean
  /authenticate/payload/:
    get:
      tags:
      - Authenticate
      summary: Get list of cities
      description: Returns a payload with a list of all active cities for registration.
      responses:
        "200":
          description: A list of cities
          content:
            application/json:
              schema:
                type: object
                properties:
                  cities:
                    type: array
                    items:
                      $ref: '#/components/schemas/City'
        "500":
          description: Server error
  /authenticate/register/:
    post:
      tags:
      - Authenticate
      summary: Register a new user
      description: Registers a user with all the required details and logs them in if successful. Photo upload is required.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
        required: true
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistrationResponse'
        "400":
          description: Error in registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /authenticate/login/:
    post:
      tags:
      - Authenticate
      summary: Login a user
      description: Authenticates a user with email and password. The email check is case-insensitive.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Invalid credentials or account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /users/user-details/:
    get:
      tags:
      - Users
      summary: Get all user details
      description: Returns details for all users in the system. Requires authentication and staff privileges.
      security:
      - BearerAuth: []
      responses:
        "200":
          description: A list of user details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        "401":
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Forbidden - Staff privileges required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /users/preferences/:
    get:
      tags:
      - Users
      summary: Get authenticated user's preferences
      description: Returns the preferences for the currently authenticated user.
      responses:
        "200":
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        "404":
          description: User preferences not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
      security:
      - BearerAuth: []
    post:
      tags:
        - Users
      summary: Create or update user preferences
      description: |
        Create or update the preferences for the currently authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPreferencesRequest'
      responses:
        "200":
          description: Preferences updated or created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        "400":
          description: Invalid input or update failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
      security:
        - BearerAuth: []
  /users/preferences/payload:
    get:
      tags:
      - Users
      summary: Get user preferences payload
      description: Returns all relevant categorical data for user preferences.
      responses:
        "200":
          description: User preferences payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferencesPayloadResponse'
      security:
      - BearerAuth: []
  /users/questionnaire/:
    get:
      tags:
      - Questionnaire
      summary: Get questionnaire templates
      description: Returns all questionnaire templates with their questions in order, or a specific template if ID is provided.
      parameters:
      - name: id
        in: query
        required: false
        description: Optional ID of a specific questionnaire template to retrieve
        schema:
          type: string
      responses:
        "200":
          description: Questionnaire templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionnaireResponse'
        "404":
          description: Questionnaire template not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
  /users/questionnaire/responses/:
    get:
      tags:
      - Questionnaire
      summary: Get user's questionnaire responses
      description: Retrieve the authenticated user's responses to the questionnaire.
      responses:
        "200":
          description: User's questionnaire responses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      $ref: '#/components/schemas/Question'
                    text_response:
                      type: string
                      nullable: true
                    numeric_response:
                      type: number
                      nullable: true
                    created_at:
                      type: string
                      format: date-time
        "404":
          description: No responses found or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
      security:
      - BearerAuth: []
    
    post:
      tags:
      - Questionnaire
      summary: Submit or update questionnaire responses
      description: Submit or update the authenticated user's responses to the questionnaire. Existing responses will be deleted first.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionnaireResponsesRequest'
      responses:
        "201":
          description: Responses saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
      security:
      - BearerAuth: []
  /apartments/post-payload/:
    get:
      tags:
      - Apartments
      summary: Get apartment post payload
      description: Returns all necessary data for posting a new apartment (cities, features).
      responses:
        "200":
          description: Apartment post payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentPostPayloadResponse'
        "500":
          description: Server error
  /apartments/new/:
    post:
      tags:
      - Apartments
      summary: Create a new apartment
      description: Creates a new apartment with the provided details. At least one photo is required.
      security:
      - UserAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApartmentCreate'
        required: true
      responses:
        "201":
          description: Apartment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentResponse'
        "400":
          description: Error in apartment creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/{apartment_id}/:
    get:
      tags:
      - Apartments
      summary: Get apartment by ID
      description: Returns details for a specific apartment.
      parameters:
      - name: apartment_id
        in: path
        description: ID of the apartment to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Apartment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentResponse'
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "404":
          description: Apartment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
      - Apartments
      summary: Delete apartment by ID
      description: Deletes an apartment if the authenticated user is the owner.
      security:
      - UserAuth: []
      parameters:
      - name: apartment_id
        in: path
        description: ID of the apartment to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: Apartment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid UUID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "403":
          description: Not authorized to delete this apartment
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "404":
          description: Apartment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/preference/:
    post:
      tags:
      - Apartments
      summary: Like or unlike an apartment
      description: Sets a user's preference (like/unlike) for an apartment.
      security:
      - UserAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApartmentLikeRequest'
        required: true
      responses:
        "200":
          description: Preference set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "404":
          description: Apartment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/my/:
    get:
      tags:
      - Apartments
      summary: Get user's apartments
      description: Returns all apartments created by the authenticated user.
      security:
      - UserAuth: []
      responses:
        "200":
          description: List of user's apartments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApartmentResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/liked/:
    get:
      tags:
      - Apartments
      summary: Get user's liked apartments
      description: Returns all apartments liked by the authenticated user.
      security:
      - UserAuth: []
      responses:
        "200":
          description: List of liked apartments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApartmentResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/likers/:
    get:
      tags:
      - Apartments
      summary: Get users who liked user's apartments
      description: Returns all users who liked the authenticated user's apartments.
      security:
      - UserAuth: []
      responses:
        "200":
          description: List of users who liked user's apartments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /apartments/recommendations/:
    get:
      tags:
      - Apartments
      summary: Get relevant apartments based on preferences
      description: "Returns a list of apartments relevant to the user's preferences, up to a specified limit."
      security:
      - UserAuth: []
      parameters:
      - name: limit
        in: query
        description: Maximum number of apartments to retrieve
        required: false
        schema:
          type: integer
          default: 10
          minimum: 1
      responses:
        "200":
          description: List of recommended apartments
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  apartments:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApartmentResponse'
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    ValidateUniqueRequest:
      type: object
      properties:
        email:
          type: string
          description: User's email address.
          format: email
        phone:
          type: string
          description: User's phone number.
      description: Schema for validating user uniqueness.
    CitiesResponse:
      type: object
      properties:
        cities:
          type: array
          items:
            type: string
      description: Schema for the response containing a list of cities.
    UserRegistrationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          description: >
            Password must be at least 8 characters long and contain at least 
            one number, one letter, and one uppercase letter
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
          enum: [Male, Female, Other]
        occupation:
          type: string
        birth_date:
          type: string
          format: date
        preferred_city:
          type: string
        phone_number:
          type: string
        about_me:
          type: string
        photo:
          type: string
          format: binary
          description: User profile photo (required)
      required:
        - email
        - password
        - first_name
        - last_name
        - gender
        - occupation
        - birth_date
        - preferred_city
        - phone_number
        - photo
      description: Schema for user registration request.
    UserRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully"
        user:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            gender:
              type: string
            occupation:
              type: string
            birth_date:
              type: string
              format: date
            phone_number:
              type: string
            preferred_city:
              type: string
            about_me:
              type: string
            photo:
              type: string
              format: uri
              description: Reference to the stored photo in Cloudinary
            photo_url:
              type: string
              format: uri
              description: Full URL to the user's photo in Cloudinary
        UserAuth:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      description: Schema for user registration response.
    QuestionnaireResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        order:
          type: integer
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
      description: Schema for questionnaire structure response.
    Question:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        question_type:
          type: string
          enum: [text, radio]
        order:
          type: integer
        options:
          type: object
          nullable: true
          properties:
            min:
              type: string
            max:
              type: string
        placeholder:
          type: string
          nullable: true
      description: Schema for a questionnaire question.
    QuestionnaireRequest:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionnaireRequest_questions'
      description: Schema for updating a questionnaire.
    UserPreferencesPayloadResponse:
      type: object
      properties:
        cities:
          type: array
          items:
            $ref: '#/components/schemas/City'
        apartment_features:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
      description: Schema for user preferences payload.
    UserPreferencesRequest:
      type: object
      properties:
        city:
          type: string
          format: uuid
          description: City UUID (required)
        move_in_date:
          type: string
          format: date
          nullable: true
          description: Preferred move-in date (optional)
        features:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
          description: List of feature UUIDs (optional)
        number_of_roommates:
          type: array
          items:
            type: integer
          nullable: true
          description: List of desired number of roommates (optional)
        price_range:
          type: object
          nullable: true
          description: Price range object
          properties:
            min_price:
              type: integer
              description: Minimum price (optional)
            max_price:
              type: integer
              description: Maximum price (optional)
        max_floor:
          type: integer
          nullable: true
          description: Maximum floor preference (optional)
        area:
          type: string
          nullable: true
          description: Preferred neighborhood or area (optional)
      required:
        - city
      description: Schema for updating user preferences.      type: object
      properties:
        city:
          type: string
        move_in_date:
          type: string
          format: date
        features:
          type: array
          items:
            type: string
        number_of_roommates:
          type: integer
        price_range:
          $ref: '#/components/schemas/UserPreferencesRequest_price_range'
        max_floor:
          type: integer
          nullable: true
          description: Maximum floor preference
        area:
          type: string
          nullable: true
          description: Preferred neighborhood or area
      description: Schema for updating user preferences.
    ApartmentPostPayloadResponse:
      type: object
      properties:
        cities:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
      description: Schema for apartment post payload.
    ApartmentCreate:
      type: object
      required:
        - city
        - street
        - type
        - floor
        - number_of_rooms
        - available_rooms
        - total_price
        - available_entry_date
        - photos
      properties:
        city:
          type: integer
        street:
          type: string
        type:
          type: string
        floor:
          type: integer
        number_of_rooms:
          type: integer
        available_rooms:
          type: integer
        total_price:
          type: number
        available_entry_date:
          type: string
          format: date
        about:
          type: string
        features:
          type: array
          items:
            type: integer
        photos:
          type: array
          items:
            type: string
            format: binary
        is_yad2:
          type: boolean
        latitude:
          type: number
          format: float
          description: Optional latitude coordinate. If provided, will be used instead of geocoding the address.
        longitude:
          type: number
          format: float
          description: Optional longitude coordinate. If provided, will be used instead of geocoding the address.
    ApartmentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        city:
          type: integer
        street:
          type: string
        type:
          type: string
        house_number:
          type: integer
        floor:
          type: integer
        number_of_rooms:
          type: integer
        available_rooms:
          type: integer
        total_price:
          type: number
        available_entry_date:
          type: string
          format: date
        about:
          type: string
        feature_details:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        created_at:
          type: string
          format: date-time
        photo_urls:
          type: array
          items:
            type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        area:
          type: string
        user_details:
          type: object
          properties:
            email:
              type: string
              format: email
            first_name:
              type: string
            last_name:
              type: string
            gender:
              type: string
            occupation:
              type: string
            birth_date:
              type: string
              format: date
            phone_number:
              type: string
            preferred_city:
              type: string
            about_me:
              type: string
            photo:
              type: string
              format: uri
            photo_url:
              type: string
              format: uri
      description: Schema for returning apartment details.
    ApartmentLikeRequest:
      type: object
      properties:
        id:
          type: integer
        like:
          type: integer
          enum:
          - 0
          - 1
      description: Schema for liking or disliking an apartment.
    QuestionnaireResponsesRequest:
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
      description: Schema for submitting questionnaire responses.
    UserResponse:
      type: object
      properties:
        question:
          type: integer
          description: ID of the question being answered
        text_response:
          type: string
          nullable: true
          description: Text response for text-type questions
        numeric_response:
          type: integer
          nullable: true
          description: Numeric response (1-5) for radio-type questions
      description: Schema for a user's response to a question.
    UserResponsesResponse:
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDetail'
      description: Schema for retrieving user's questionnaire responses.
    UserResponseDetail:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/Question'
        text_response:
          type: string
          nullable: true
        numeric_response:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
      description: Schema for a detailed user response including question details.
    QuestionnaireRequest_questions:
      type: object
      properties:
        id:
          type: integer
        answer:
          type: string
    UserPreferencesPayloadResponse_apartment_features:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    UserPreferencesRequest_price_range:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
      description: Schema for user login request.
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "User logged in successfully"
        user:
          type: object
          properties:
            email:
              type: string
              format: email
            first_name:
              type: string
            last_name:
              type: string
            gender:
              type: string
            occupation:
              type: string
            birth_date:
              type: string
              format: date
            phone_number:
              type: string
            preferred_city:
              type: string
            about_me:
              type: string
            photo:
              type: string
              format: uri
        UserAuth:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      description: Schema for user login response.
    City:
      type: object
      properties:
        id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        name:
          type: string
        hebrew_name:
          type: string
        areas:
          type: array
          items:
            type: string
      description: Schema for a city.
    UserDetails:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        gender:
          type: string
        occupation:
          type: string
        birth_date:
          type: string
          format: date
        phone_number:
          type: string
        preferred_city:
          type: string
        about_me:
          type: string
        photo:
          type: string
          format: uri
    UserPreferences:
      type: object
      properties:
        id:
          type: string
        city:
          type: string
        move_in_date:
          type: string
          format: date
        features:
          type: array
          items:
            type: string
        number_of_roommates:
          type: integer
        price_range:
          $ref: '#/components/schemas/UserPreferencesRequest_price_range'
        max_floor:
          type: integer
          nullable: true
          description: Maximum floor preference
        area:
          type: string
          nullable: true
          description: Preferred neighborhood or area
    CityPayload:
      type: object
      properties:
        cities:
          type: array
          items:
            $ref: '#/components/schemas/City'
      description: Schema for city payload.
  securitySchemes:
    UserAuth:
      type: http
      scheme: bearer
    AppVerification:
      type: apiKey
      name: X-App-Verification
      in: header
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
